0 - bandit0

1. 
ZjLjTmM6FvvyRnrb2rfNWOZOTa6ip5If
(just <ls> - ReadMe)

2.
263JGJPfgU6LtdEvgfWU1XP5yac29mFx
(<./> for preventing interpretation <-> as a flag
For creating this type of file use <./-> OR <echo hello > ->)

3. 
MNk8KNH3Usiio41PRUEoDFPqfxLPlSmx
(The same approach. If you want to see these types of files with quotes <'>,
then add in .bashrc <alias ls='ls --quoting-style=shell-always'>,
and to apply the changes run <source ~/.bashrc>. 
If you don't want to see quotes, add there <alias ls='ls --quoting-style=literal'>,
and apply the changes, as well)

4.
2WmrDFRmJIq3IPxneAaMGhap0pFhF3NJ
(This is a hidden file which might be visible by <ls -a> or <ls -A>
They might be created with '.' in front of a name
Interesting that hidden files include current and parent directories - 
They might be visible by <ls -a>, and if with <ls -A> they are excluded)

5.
4oQYVPkxZOOEOO5pTW81FB8j8lxXGUQw
(find command with <.> - current directory, -type f - stands for file
There are also types:
d (directories),
c (character devices - hardware that transmit data char by char like a keyboard),
l (symbolic link),
s (sockets in network communication)
b (block devices that used for storage)
p (pipes for inter-process communication)
Flag - exec file {} +
{} - is a placeholder for every file that matches the condition
+ is just a way to make system execute cmd at once (not each file individually)
Grep ASCII, text, Unicode or UTF-8 (might be given in a sequence:
': ASCII\|: UTF-8\|: Unicode\|: text', where
: - is a colon
\| - OR (\ here is just for preventing incorrect interpretation | symbol as a pipe)
)
ASCII - American Standard Code for Information Interchange (English characters)
UTF-8 - Unicode Transformation Format (8-bit)
Unicode - also supports UTF-16 and UTF-32
Text - general classification (any recognizable readable text)
We also can use <cut> to remove unnecessary sections from each line of files
cut -d: -f1, where...
-d is a delimiter,
-f is a field of the line that we want to see, so we use 1 for the 1st line
Also, we can use <xargs> to build and execute command lines from standard input
In other words the output becomes the input for the following command,
for example <cat> or <echo > file>

P.s. exec might be useful for rm, mv, chmod all the matching files
P.p.s. find might be used with -empty flag or -name "*.txt" flag
)
